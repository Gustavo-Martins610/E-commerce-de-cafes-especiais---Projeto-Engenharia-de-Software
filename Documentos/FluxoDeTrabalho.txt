Checklist de Desenvolvimento ‚Äì E-commerce de Caf√©s Especiais

Prepara√ß√£o do Projeto

[x] Criar projeto Spring Boot com depend√™ncias:

[x] Spring Web

[x] Spring Data JPA

[x] Spring Security (JWT)

[x] Flyway

[x] PostgreSQL Driver

[x]  Configurar application.properties com conex√£o ao Postgres

[x]  Criar schema no banco (ex: cafes_db)

2. Banco de Dados (Flyway)

[x] Escrever V0__criar_tabela_usuarios.sql

[x] Escrever V1__criar_tabela_enderecos.sql

[x] Escrever V2__criar_tabela_produtos.sql

[x] Escrever V3__criar_tabela_carrinhos.sql

[x] Escrever V4__criar_tabela_carrinho_itens.sql

[x] Escrever V5__criar_tabela_pedidos.sql

[x] Escrever V6__criar_tabela_pedido_itens.sql

[x] Rodar Flyway (mvnw flyway:migrate) e validar schema criado

3. Models (Entidades JPA)

Criar classe Usuario

id, nome, cpf, email, senha, tipo, createdAt

rela√ß√£o 1:N com Endereco

rela√ß√£o 1:1 com Carrinho

rela√ß√£o 1:N com Pedido

 Criar classe Endereco

id, cep, rua, numero, complemento, bairro, cidade, estado, isPadrao

rela√ß√£o N:1 com Usuario

 Criar classe Produto

id, nome, descricao, preco, estoque, categoria, imagemUrl

 Criar classe Carrinho

id, idUsuario

rela√ß√£o 1:N com CarrinhoItem

 Criar classe CarrinhoItem

id, quantidade

rela√ß√£o N:1 com Carrinho

rela√ß√£o N:1 com Produto

 Criar classe Pedido

id, status, total, createdAt

rela√ß√£o N:1 com Usuario

rela√ß√£o N:1 com Endereco

rela√ß√£o 1:N com PedidoItem

 Criar classe PedidoItem

id, quantidade, precoUnitario

rela√ß√£o N:1 com Pedido

rela√ß√£o N:1 com Produto

Reposit√≥rios (Spring Data JPA)

 Criar UsuarioRepository

 Criar EnderecoRepository

 Criar ProdutoRepository

 Criar CarrinhoRepository

 Criar CarrinhoItemRepository

 Criar PedidoRepository

 Criar PedidoItemRepository

üîπ 5. Services (Regras de Neg√≥cio)

 UsuarioService ‚Äì cadastro, login, atualiza√ß√£o

 EnderecoService ‚Äì CRUD endere√ßos

 ProdutoService ‚Äì CRUD produtos (estoque incluso)

 CarrinhoService ‚Äì adicionar/remover itens, calcular total

 PedidoService ‚Äì gerar pedido a partir do carrinho, atualizar status

üîπ 6. Controllers (API REST)

 UsuarioController

POST /usuarios (cadastrar)

POST /login (login com JWT)

GET /usuarios/{id} (detalhes)

 EnderecoController

CRUD de endere√ßos (com valida√ß√£o ViaCEP)

 ProdutoController

GET /produtos (listar)

GET /produtos/{id}

POST/PUT/DELETE (somente admin)

 CarrinhoController

GET /carrinho (ver carrinho do usu√°rio)

POST /carrinho/adicionar

DELETE /carrinho/remover/{itemId}

 PedidoController

POST /pedidos (checkout ‚Üí cria pedido)

GET /pedidos (listar pedidos do usu√°rio)

PUT /pedidos/{id}/status (admin altera status)

üîπ 7. Seguran√ßa

 Configurar autentica√ß√£o com JWT

 Implementar login com Google OAuth2

 Proteger endpoints (admin vs cliente vs p√∫blico)

üîπ 8. Testes

 Testar endpoints no Postman/Insomnia

 Validar regras de neg√≥cio (ex: estoque n√£o negativo)

 Escrever testes unit√°rios (JUnit) para Services

 Escrever testes de integra√ß√£o (MockMvc) para Controllers

üîπ 9. Frontend (React ou outro)

 P√°gina de login/cadastro (com Google login)

 P√°gina de cat√°logo de produtos

 P√°gina de detalhes de produto

 P√°gina de carrinho

 P√°gina de checkout

 P√°gina de pedidos (cliente e admin)

üîπ 10. Deploy

 Criar Dockerfile + docker-compose (API + DB)

 Configurar vari√°veis de ambiente (secrets)

 Deploy em Railway/Render/Heroku ou servidor pr√≥prio